{"mappings":"YA6BA,IAAMA,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,UACpCE,EAAYH,SAASC,cAAc,SACnCG,EAAcJ,SAASC,cAAc,WAI3C,SAASI,EAAcC,EAAUC,GACf,IAAIC,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,uBAAwCM,OAAfT,EAAS,QAAYS,OAANR,EAAM,OAEpDG,EAAK,sBAAqCK,OAAfT,EAAS,QAAYS,OAANR,EAAM,M,GAEnDA,E,IAZPR,EAAKiB,iBAAiB,UAkBtB,WAKE,IAJA,IAAIT,EAAQL,EAAWe,MACjBC,EAASd,EAAYa,MACrBE,EAAOhB,EAAUc,MAEdG,EAAI,EAAGA,GAAKF,EAAQE,GAAK,EAChCf,EAAce,EAAGb,GAAOc,MAAK,SAAAC,G,OAAKC,MAAMD,E,IAAIE,OAAM,SAAAC,G,OAAKF,MAAME,E,IAC7DlB,GAAQY,C","sources":["src/js/03-promises.js"],"sourcesContent":["//В HTML есть разметка формы, в поля которой пользователь будет \n//вводить первую задержку в миллисекундах, шаг увеличения задержки\n// для каждого промиса после первого и количество промисов которое\n// необходимо создать.\n\n//Напиши скрипт, который при сабмите формы вызывает функцию \n//createPromise(position, delay) столько раз, сколько ввели в поле amount.\n//При каждом вызове передай ей номер создаваемого промиса(position) и \n//задержку учитывая введенную пользователем первую задержку(delay) и шаг(step).\n\n//Дополни код функции createPromise так, чтобы она возвращала один промис,\n// который выполянется или отклоняется через delay времени.Значением промиса\n// должен быть объект, в котором будут свойства position и delay со значениями\n// одноименных параметров.Используй начальный код функции для выбора того, \n//что нужно сделать с промисом - выполнить или отклонить.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n//import Notiflix from 'notiflix';\n\n//____________________________________________________________________________\n//Здравствуйте! Я запуталась совсем c этим заданием. Не выходит. Помогите, пожалуйста!\n//_____________________________________________________________________________\nconst form = document.querySelector('.form');\nconst delayInput = document.querySelector('.delay');\nconst stepInput = document.querySelector('.step');\nconst amountInput = document.querySelector('.amount');\n\nform.addEventListener('submit', onSubmit);\n  \nfunction createPromise(position, delay) {  \n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n\n    return;\n  });\n}\n\nfunction onSubmit(){\n  let delay = delayInput.value;\n  const amount = amountInput.value;\n  const step = stepInput.value;\n\n  for (let i = 1; i <= amount; i += 1){\n    createPromise(i, delay).then(x => alert(x)).catch(y => alert(y));\n    delay +=step;\n  }\n};\n\n\n\n\n\n\n"],"names":["$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","concat","addEventListener","value","amount","step","i","then","x","alert","catch","y"],"version":3,"file":"03-promises.bb440767.js.map"}