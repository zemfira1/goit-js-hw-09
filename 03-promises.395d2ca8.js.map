{"mappings":"AA6BA,MAAMA,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,UACpCE,EAAYH,SAASC,cAAc,SACnCG,EAAcJ,SAASC,cAAc,WAI3C,SAASI,EAAcC,EAAUC,GACf,IAAIC,SAAQ,CAACC,EAASC,KACpC,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,uBAAqBH,QAAiBC,OAE5CG,EAAK,sBAAoBJ,QAAeC,MAAU,GAErDA,EAEH,G,CAdJR,EAAKgB,iBAAiB,UAkBtB,WACE,IAAIR,EAAQL,EAAWc,MACvB,MAAMC,EAASb,EAAYY,MACrBE,EAAOf,EAAUa,MAEvB,IAAK,IAAIG,EAAI,EAAGA,GAAKF,EAAQE,GAAK,EAChCd,EAAcc,EAAGZ,GAAOa,MAAKC,GAAKC,MAAMD,KAAIE,OAAMC,GAAKF,MAAME,KAC7DjB,GAAQW,C","sources":["src/js/03-promises.js"],"sourcesContent":["//В HTML есть разметка формы, в поля которой пользователь будет \n//вводить первую задержку в миллисекундах, шаг увеличения задержки\n// для каждого промиса после первого и количество промисов которое\n// необходимо создать.\n\n//Напиши скрипт, который при сабмите формы вызывает функцию \n//createPromise(position, delay) столько раз, сколько ввели в поле amount.\n//При каждом вызове передай ей номер создаваемого промиса(position) и \n//задержку учитывая введенную пользователем первую задержку(delay) и шаг(step).\n\n//Дополни код функции createPromise так, чтобы она возвращала один промис,\n// который выполянется или отклоняется через delay времени.Значением промиса\n// должен быть объект, в котором будут свойства position и delay со значениями\n// одноименных параметров.Используй начальный код функции для выбора того, \n//что нужно сделать с промисом - выполнить или отклонить.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n//import Notiflix from 'notiflix';\n\n//____________________________________________________________________________\n//Здравствуйте! Я запуталась совсем c этим заданием. Не выходит. Помогите, пожалуйста!\n//_____________________________________________________________________________\nconst form = document.querySelector('.form');\nconst delayInput = document.querySelector('.delay');\nconst stepInput = document.querySelector('.step');\nconst amountInput = document.querySelector('.amount');\n\nform.addEventListener('submit', onSubmit);\n  \nfunction createPromise(position, delay) {  \n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n\n    return;\n  });\n}\n\nfunction onSubmit(){\n  let delay = delayInput.value;\n  const amount = amountInput.value;\n  const step = stepInput.value;\n\n  for (let i = 1; i <= amount; i += 1){\n    createPromise(i, delay).then(x => alert(x)).catch(y => alert(y));\n    delay +=step;\n  }\n};\n\n\n\n\n\n\n"],"names":["$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","value","amount","step","i","then","x","alert","catch","y"],"version":3,"file":"03-promises.395d2ca8.js.map"}